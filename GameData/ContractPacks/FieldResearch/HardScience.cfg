// Contract for doing difficult situation/biome combinations.
//   Author: nightingale

CONTRACT_TYPE
{
    name = FS_HardScience
    group = FieldResearch

    title = Field Research: Gather rare science results from @biome
    description = @isLanded ? @landStr : @waterStr
    synopsis = Run the requested experiments in while @situation.ToString().ToLower() at @biome.
    completedMessage = This is some great data that we've accumulated!

    // No more than one of these
    maxSimultaneous = 1

    prestige = Significant
    prestige = Exceptional

    // Always offered by the Field Research Team
    agent = Field Research Team

    targetBody = @/ss0.CelestialBody()

    // Contract rewards
    rewardFunds = Random(35000.0, 40000.0)
    rewardReputation = Random(7.5, 15.0)

    DATA
    {
        type = string

        water = @isEve ? "whatever passes for water on Eve" : "water"
        waterStr = They say that it's difficult to find @water at @biome.  We've mapped out a few locations where there might be some.  Find a suitable spot and run some experiments.
        landStr = They say there isn't much land at @biome.  We've mapped out a few locations where there might be some.  Find a suitable spot and run some experiments.

        sitStr = @isLanded ? "Landing" : "Splashdown"
    }

    DATA
    {
        type = Biome
        biome = @ss0.Biome()
    }

    DATA
    {
        type = ExperimentSituations
        situation = @ss0.Situation()
    }

    DATA
    {
        type = bool
        isLanded = @situation == SrfLanded
        isEve = @targetBody == Eve
    }

    DATA
    {
        type = ScienceSubject
        ss0 = DifficultScienceSubjects().Where(s => s.RemainingScience() > 0.0 && (Prestige() == Significant && s.CelestialBody() == HomeWorld() || Prestige() == Exceptional && s.CelestialBody() != HomeWorld()) && OrbitedBodies().Contains(s.CelestialBody()) && s.Experiment() != asteroidSample).Random()
    }

    DATA
    {
        type = List<ScienceSubject>
        scienceSubjects = DifficultScienceSubjects().Where(s => s.CollectedScience() == 0.0 && s.Biome() == @biome && s.Situation() == @situation).Random(3)
    }

    DATA
    {
        type = List<Location>
        locations = @biome.DifficultLocations()
    }

    DATA
    {
        type = Location
        requiredValue = false

        loc0 = @locations.ElementAt(0)
        loc1 = @locations.ElementAt(1)
        loc2 = @locations.ElementAt(2)
    }

    DATA
    {
        type = ScienceRecoveryMethod
        recoveryMethod = @targetBody.IsHomeWorld() || @targetBody.Parent().IsHomeWorld() ? Ideal : RecoverOrTransmit
    }

    PARAMETER
    {
        name = CollectScience
        type = CollectScience

        subject = @/scienceSubjects
    }

    BEHAVIOUR
    {
        name = WaypointGenerator
        type = WaypointGenerator

        WAYPOINT
        {
            name = "@/biome.Name() @/sitStr"
            icon = ContractPacks/FieldResearch/Icons/research

            latitude = @/loc0.Latitude()
            longitude = @/loc0.Longitude()
            altitude = 0.0
        }

        WAYPOINT
        {
            name = "@/biome.Name() @/sitStr"
            icon = ContractPacks/FieldResearch/Icons/research

            hidden = @/locations.Count() < 2

            latitude = @/loc1.Latitude()
            longitude = @/loc1.Longitude()
            altitude = 0.0
        }

        WAYPOINT
        {
            name = "@/biome.Name() @/sitStr"
            icon = ContractPacks/FieldResearch/Icons/research

            hidden = @/locations.Count() < 3

            latitude = @/loc2.Latitude()
            longitude = @/loc2.Longitude()
            altitude = 0.0
        }
    }

    REQUIREMENT
    {
        type = Orbit
        targetBody = Kerbin
    }
}
