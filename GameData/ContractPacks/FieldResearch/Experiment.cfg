// Contract for doing a certain experiment in different situations.
//   Author: nightingale

CONTRACT_TYPE
{
    name = FS_Experiment
    group = FieldResearch

    title = Field Research: @experiment.Name().ToLower().FirstCap() experiments on @targetBody
    description = Wernher is especially exited to try some @experiment.Name().ToLower() experiments at various locations on @targetBody.  We doubt the results will be much different from the last study Wernher commissioned...  but he's the boss!
    synopsis = Run the @experiment.Name().ToLower() experiments on @targetBody.
    completedMessage = Yup, that's definitely a lot of @experiment.Name().ToLower() results.  Just put the data in a spreadsheet and we'll look at it later.

    // Up to two
    maxSimultaneous = 2

    // Stop offering Kerbin contracts once the player orbits the sun
    prestige = OrbitedBodies().Contains(Sun) ? [ Significant, Exceptional ] : [ Trivial, Significant, Exceptional ]

    // Always offered by the Field Research Team
    agent = Field Research Team

    targetBody = Prestige() == Trivial ? HomeWorld() : Prestige() == Significant ? OrbitedBodies().Where(cb => cb.Parent() == HomeWorld() && cb.HasSurface()).Random() : OrbitedBodies().Where(cb => cb.Parent() != HomeWorld() && cb != HomeWorld() && cb.HasSurface()).Random()

    // Contract rewards
    rewardFunds = Random(12000.0, 14000.0)
    rewardReputation = Random(2.0, 5.0)

    // This one has a tendency to hit dead ends when generating, so give it some extra weight
    weight = 5.0

    // Body + Experiment must be unique for the active list
    DATA
    {
        type = string

        activeUniqueValue = true

        uniqueCheck = "@targetBody @experiment"
    }

    // Exclusion list of experiments
    DATA
    {
        type = List<ScienceExperiment>
        experiments = AllExperiments().ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
    }

    DATA
    {
        type = ScienceExperiment
        experiment = @experiments.Random()
    }

    DATA
    {
        type = List<ScienceSubject>
        scienceSubjects = AllScienceSubjectsByBodyExperiment([@targetBody], [@experiment]).Where(s => s.CollectedScience() == 0.0 && !s.Biome().IsKSC()).Random(5)
    }

    DATA
    {
        type = ScienceSubject
        ss0 = @scienceSubjects.ElementAt(0)
        ss1 = @scienceSubjects.ElementAt(1)
        ss2 = @scienceSubjects.ElementAt(2)
        ss3 = @scienceSubjects.ElementAt(3)
        ss4 = @scienceSubjects.ElementAt(4)
    }

    DATA
    {
        type = ScienceRecoveryMethod
        recoveryMethod = @targetBody.IsHomeWorld() || @targetBody.Parent().IsHomeWorld() ? Ideal : RecoverOrTransmit
    }

    PARAMETER
    {
        name = CollectScience0
        type = CollectScience

        biome = @/ss0.Biome()
        situation = @/ss0.Situation()
        experiment = @/ss0.Experiment()
        recoveryMethod = @/recoveryMethod

        rewardFunds = Random(5000.0, 6000.0)
    }

    PARAMETER
    {
        name = CollectScience1
        type = CollectScience

        biome = @/ss1.Biome()
        situation = @/ss1.Situation()
        experiment = @/ss1.Experiment()
        recoveryMethod = @/recoveryMethod

        rewardFunds = Random(5000.0, 6000.0)
    }

    PARAMETER
    {
        name = CollectScience2
        type = CollectScience

        biome = @/ss2.Biome()
        situation = @/ss2.Situation()
        experiment = @/ss2.Experiment()
        recoveryMethod = @/recoveryMethod

        rewardFunds = Random(5000.0, 6000.0)
    }

    PARAMETER
    {
        name = CollectScience3
        type = CollectScience

        biome = @/ss3.Biome()
        situation = @/ss3.Situation()
        experiment = @/ss3.Experiment()
        recoveryMethod = @/recoveryMethod

        rewardFunds = Random(5000.0, 6000.0)
    }

    PARAMETER
    {
        name = CollectScience4
        type = CollectScience

        biome = @/ss4.Biome()
        situation = @/ss4.Situation()
        experiment = @/ss4.Experiment()
        recoveryMethod = @/recoveryMethod

        rewardFunds = Random(5000.0, 6000.0)
    }

    REQUIREMENT
    {
        type = Orbit
        targetBody = Kerbin
    }
}
